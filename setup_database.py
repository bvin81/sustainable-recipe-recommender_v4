#!/usr/bin/env python3
"""
Egyszer≈±s√≠tett setup - CSV feldolgoz√°s √©s adatb√°zis inicializ√°l√°s
"""

import os
import pandas as pd
import numpy as np
from pathlib import Path

def setup_project():
    """Teljes projekt inicializ√°l√°s"""
    print("üöÄ Project Setup - Simplified Version")
    print("=" * 50)
    
    # K√∂nyvt√°rak l√©trehoz√°sa
    data_dir = Path("data")
    data_dir.mkdir(exist_ok=True)
    
    user_study_dir = Path("user_study")
    user_study_dir.mkdir(exist_ok=True)
    
    # __init__.py f√°jlok l√©trehoz√°sa
    create_init_files()
    
    # CSV feldolgoz√°s
    success = setup_csv()
    
    if success:
        print("\nüéâ PROJECT SETUP COMPLETE!")
        print("‚úÖ CSV processed successfully")
        print("‚úÖ Directory structure created")
        print("‚úÖ Ready for deployment")
    else:
        print("\n‚ö†Ô∏è SETUP COMPLETED WITH FALLBACKS")
        print("‚úÖ App will work with sample data")
    
    return success

def create_init_files():
    """__init__.py f√°jlok l√©trehoz√°sa"""
    
    # user_study/__init__.py
    init_content = '''"""
User Study Module - Simplified Version
"""
from .routes import user_study_bp

__all__ = ['user_study_bp']
'''
    
    with open("user_study/__init__.py", "w", encoding="utf-8") as f:
        f.write(init_content)
    
    print("‚úÖ __init__.py files created")

def setup_csv():
    """CSV feldolgoz√°s egyszer≈±s√≠tve"""
    
    original_csv = Path("hungarian_recipes_github.csv")
    output_csv = Path("data/processed_recipes.csv")
    
    print(f"üìä Looking for: {original_csv}")
    
    # Ha van eredeti CSV, feldolgozzuk
    if original_csv.exists():
        try:
            print("üìã Processing original CSV...")
            
            # T√∂bb encoding pr√≥b√°l√°sa
            df = None
            for encoding in ['utf-8', 'utf-8-sig', 'latin-1', 'cp1252']:
                try:
                    df = pd.read_csv(original_csv, encoding=encoding)
                    print(f"‚úÖ Loaded with {encoding} encoding")
                    break
                except:
                    continue
            
            if df is None:
                raise Exception("Could not load with any encoding")
            
            # Egyszer≈± feldolgoz√°s
            processed_df = process_csv(df)
            processed_df.to_csv(output_csv, index=False, encoding='utf-8')
            
            print(f"‚úÖ Processed CSV saved: {len(processed_df)} recipes")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è CSV processing error: {e}")
    
    # Fallback: sample adatok
    print("üîß Creating sample recipes...")
    create_sample_csv(output_csv)
    return False

def process_csv(df):
    """CSV feldolgoz√°s egyszer≈±s√≠tve"""
    
    print(f"üìä Processing {len(df)} recipes")
    
    # Oszlop normaliz√°l√°s
    column_mapping = {
        'id': 'recipeid',
        'name': 'title', 
        'recipe_name': 'title',
        'image': 'images',
        'image_url': 'images',
        'directions': 'instructions',
        'steps': 'instructions'
    }
    
    # √Åtnevez√©s
    for old_col, new_col in column_mapping.items():
        if old_col in df.columns and new_col not in df.columns:
            df = df.rename(columns={old_col: new_col})
    
    # K√∂telez≈ë oszlopok biztos√≠t√°sa
    required_columns = ['recipeid', 'title', 'ingredients', 'instructions', 'images']
    
    for col in required_columns:
        if col not in df.columns:
            if col == 'recipeid':
                df[col] = range(1, len(df) + 1)
            elif col == 'images':
                df[col] = generate_image_urls(len(df))
            else:
                df[col] = f'Default {col}'
    
    # Tiszt√≠t√°s
    df = df.fillna('')
    df = df.drop_duplicates(subset=['title'], keep='first')
    df = df.reset_index(drop=True)
    df['recipeid'] = range(1, len(df) + 1)
    
    # Pontsz√°mok hozz√°ad√°sa
    add_scores(df)
    
    print(f"‚úÖ Processed to {len(df)} clean recipes")
    return df

def create_sample_csv(output_csv):
    """Sample CSV gener√°l√°sa"""
    
    # Alapreceptek
    base_recipes = [
        ("Guly√°sleves", "marhah√∫s, hagyma, paprika, paradicsom, burgonya", "Levesek"),
        ("Veget√°ri√°nus Lecs√≥", "paprika, paradicsom, hagyma, toj√°s", "Veget√°ri√°nus"),
        ("Hal√°szl√©", "ponty, csuka, hagyma, paradicsom, paprika", "Hal√©telek"),
        ("T√∫r√≥s Csusza", "sz√©les met√©lt, t√∫r√≥, tejf√∂l, szalonna", "T√©szta√©telek"),
        ("Gombapaprik√°s", "gomba, hagyma, paprika, tejf√∂l", "Veget√°ri√°nus"),
        ("Schnitzel", "sert√©sh√∫s, liszt, toj√°s, zsemlemorzsa", "H√∫s√©telek"),
        ("T√∂lt√∂tt K√°poszta", "savany√∫ k√°poszta, dar√°lt h√∫s, rizs", "H√∫s√©telek"),
        ("R√°ntott Sajt", "trappista sajt, liszt, toj√°s", "Veget√°ri√°nus"),
        ("Babguly√°s", "bab, hagyma, paprika, kolb√°sz", "Levesek"),
        ("Pal√≥cleves", "b√°r√°ny, bab, burgonya, tejf√∂l", "Levesek")
    ]
    
    # 50 receptre b≈ëv√≠t√©s
    sample_data = []
    for i in range(50):
        base = base_recipes[i % len(base_recipes)]
        recipe_id = i + 1
        title = base[0] + (f" - {i//len(base_recipes) + 1}. v√°ltozat" if i >= len(base_recipes) else "")
        
        sample_data.append({
            'recipeid': recipe_id,
            'title': title,
            'ingredients': base[1],
            'instructions': f"F≈ëz√©si √∫tmutat√≥ a {title} recepthez.",
            'category': base[2],
            'images': f'https://images.unsplash.com/photo-154759218{i%10}-recipe?w=400&h=300'
        })
    
    df = pd.DataFrame(sample_data)
    add_scores(df)
    df.to_csv(output_csv, index=False, encoding='utf-8')
    
    print(f"‚úÖ Sample CSV created: {len(df)} recipes")

def add_scores(df):
    """Pontsz√°mok hozz√°ad√°sa"""
    np.random.seed(42)  # Reproduk√°lhat√≥ eredm√©nyek
    
    n = len(df)
    df['ESI'] = np.clip(np.random.normal(65, 15, n), 10, 100)  # K√∂rnyezeti
    df['HSI'] = np.clip(np.random.normal(70, 12, n), 20, 100)  # Eg√©szs√©g
    df['PPI'] = np.clip(np.random.normal(75, 10, n), 30, 100)  # N√©pszer≈±s√©g
    
    # √ñsszetett pontsz√°m
    df['composite_score'] = (df['ESI'] * 0.4 + df['HSI'] * 0.4 + df['PPI'] * 0.2)
    
    # Kerek√≠t√©s
    for col in ['ESI', 'HSI', 'PPI', 'composite_score']:
        df[col] = df[col].round(2)

def generate_image_urls(count):
    """Placeholder k√©pek gener√°l√°sa"""
    base_urls = [
        'https://images.unsplash.com/photo-1547592180-85f173990554?w=400&h=300&fit=crop',
        'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop',
        'https://images.unsplash.com/photo-1544943910-4c1dc44aab44?w=400&h=300&fit=crop',
        'https://images.unsplash.com/photo-1551698618-1dfe5d97d256?w=400&h=300&fit=crop',
        'https://images.unsplash.com/photo-1565299507177-b0ac66763828?w=400&h=300&fit=crop'
    ]
    
    return [base_urls[i % len(base_urls)] for i in range(count)]

if __name__ == "__main__":
    setup_project()
